import os
import subprocess
import shutil
import re
import pysam

from os.path import join

configfile: config["cfp"]     
script_dir = config["script_dir"]          
name = config["name"] 
fasta_file = config["fasta"] 

outdir = config["output"] 
haplotype_tag = config["haplotype_tag"] 
barcode_tag = config["barcode_tag"] 
min_aq = config["min_aq"] 

# Determine .bam files to execute for fragment overlap analysis
infile1 = outdir + "/.internal/chrs.txt"

with open(infile1) as f:
    chrs = f.readlines()

chrs = [x.strip() for x in chrs] 
raw_awk_files = [outdir + '/temp/02_frombam/rawFromBam_' + x + ".txt" for x in chrs] 


rule all:
	input:
		final_ase = outdir + "/" + name + ".ase.tsv.gz"

rule assign_one_chromosome:
	input:
		snp = outdir + "/temp/01_split/SNPs_" + "{chr}" + ".tsv",
		bam = outdir + "/temp/01_split/splitBam." + "{chr}" + ".bam",
	output:
		master_awk_out1 = outdir + '/temp/02_frombam/rawFromBam_' + "{chr}" + ".txt"
	threads:
		1
	run:
		chr = wildcards.chr
		
		# Pull reads with a matching N mask
		samtools_calmd_log = outdir + '/logs/samtools/' + "master_bam_parse." + chr + ".txt"
		line1 = '(samtools calmd ' + input.bam + ' ' + fasta_file +''' -e | awk '$5 > ''' + min_aq 
		line2 = '''  {print $0}' | awk 'BEGIN {OFS = FS = "\t" } ; {n=split($10,reads,""); split($11,qual,""); for (i=1; i <= length($10); i++) { if(reads[i] != "="){ print $3, $4, i, qual[i], reads[i], $1}} }' > '''
		line3 = output.master_awk_out1 + ''' )2> ''' + samtools_calmd_log
		sam_call1 = line1 + line2 + line3
		os.system(sam_call1)

# Final merge of the bam files
rule final_merge:
	input:
		raw_awk_files = raw_awk_files
	output:
		final_ase = outdir + "/" + name + ".ase.tsv.gz"
	run:
		infiles = " ".join(raw_awk_files)
		os.system("cat " + infiles + " > " + output.final_ase)
