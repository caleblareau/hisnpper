import os
import subprocess
import shutil
import re
import pysam

from os.path import join

configfile: config["cfp"]     
script_dir = config["script_dir"]          
name = config["name"] 
outdir = config["output"] 
haplotype_tag = config["haplotype_tag"] 
bwa = config["bwa"] 
bwa_index = config["bwa_index"] 

# Determine .bam files to execute for fragment overlap analysis
infile1 = outdir + "/.internal/chrs.txt"

with open(infile1) as f:
    chrs = f.readlines()

chrs = [x.strip() for x in chrs] 
chrStats = [outdir + '/temp/03_fastq_permuted/' + x + "_stats.txt" for x in chrs] 
whitelists1 = [outdir + '/temp/04_whitelist/whitelist_hap1_' + x + ".txt" for x in chrs] 
whitelists2 = [outdir + '/temp/04_whitelist/whitelist_hap2_' + x + ".txt" for x in chrs] 

rule all:
	input:
		wl1 = outdir + "/final/"+name+".whitelist1.txt",
		wl2 = outdir + "/final/"+name+".whitelist2.txt"

rule process_one_chromosome:
	input:
		snp = outdir + "/temp/01_split/SNPs_" + "{chr}" + ".tsv",
		bam = outdir + "/temp/02_namesort/nameSort." + "{chr}" + ".bam",
	output:
		outQuant = outdir + '/temp/03_fastq_permuted/' + "{chr}" + "_stats.txt",
		whitelist1 = outdir + '/temp/04_whitelist/whitelist_hap1_' + "{chr}" + ".txt",
		whitelist2 = outdir + '/temp/04_whitelist/whitelist_hap2_' + "{chr}" + ".txt"
	threads:
		1
	log:
		bwalog = outdir + '/logs/bwa/' + "{chr}" + "_wasp.txt"
	run:
		chr = wildcards.chr
		# Assign reads / run WASP
		outfastq = outdir + '/temp/03_fastq_permuted'
		pycall1 = "python " + script_dir + "/python/assignReads.py --input " + input.bam + " -s " + input.snp + " -o " + outfastq
		os.system(pycall1)
		
		# Realign permuted reads for the first haplotype
		fq_11 = outfastq +"/"+ chr + "_hap1.realign_1.fastq.gz "
		fq_12 = outfastq +"/"+ chr + "_hap1.realign_2.fastq.gz "
		outbam1 = outdir + "/temp/03_fastq_permuted/"+ chr + "WASP_hap1.bam"		
		bw_call1 = bwa + " mem " + bwa_index + " " + fq_11 + fq_12 + " 2> "+log.bwalog+" | samtools view -bS -  -o " + outbam1
		os.system(bw_call1)
		
		# Realign permuted reads for the second haplotype
		fq_21 = outfastq +"/"+ chr + "_hap2.realign_1.fastq.gz "
		fq_22 = outfastq +"/"+ chr + "_hap2.realign_2.fastq.gz "
		outbam2 = outdir + "/temp/03_fastq_permuted/"+ chr + "WASP_hap2.bam"		
		bw_call2 = bwa + " mem " + bwa_index + " " + fq_21 + fq_22 + " 2> "+log.bwalog+" | samtools view -bS -  -o " + outbam2
		os.system(bw_call2)
		
		# Filter reads that don't map well based on permutation
		stat = outdir + '/temp/03_fastq_permuted/' + chr + "_stats.txt"
		out_wl = outdir + '/temp/04_whitelist' 
		pycall2 = "python " + script_dir + "/python/decideReads.py --bam1 " + outbam1 + " --bam2 " + outbam2 + " -s " + stat + " -o " + out_wl
		os.system(pycall2)


# Final merge of everything
rule final_merge:
	input:
		wls1 = whitelists1,
		wls2 = whitelists2
	output:
		final_wl1 = outdir + "/final/"+name+".whitelist1.txt",
		final_wl2 = outdir + "/final/"+name+".whitelist2.txt",
		final_sumstats = outdir + "/final/"+name+".sumstats.tsv"
	run:
		os.system("cat " + " ".join(input.wls1) + " > " + output.final_wl1 )
		os.system("cat " + " ".join(input.wls2) + " > " + output.final_wl2 )
		statdir = outdir + '/temp/03_fastq_permuted'
		aaSS_R = script_dir + "/R/02_mungeQC.R"
		r_call1 = " ".join(["Rscript", aaSS_R, output.final_sumstats, statdir])
		os.system(r_call1)
